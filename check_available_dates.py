import os
from dotenv import load_dotenv
import winrm
import sys
import json
from datetime import datetime, timedelta
import re

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ PowerShell
def parse_ps_datetime(ps_date):
    match = re.search(r"\d+", ps_date)
    if match:
        timestamp = int(match.group(0)) // 1000
        return datetime.fromtimestamp(timestamp)
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
load_dotenv()
username = os.getenv('RDP_LOG_USERNAME')
password = os.getenv('RDP_LOG_PASSWORD')
domain = os.getenv('RDP_LOG_DOMAIN')
servers_str = os.getenv('RDP_SERVERS', '')

if not username or not password:
    print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (RDP_LOG_USERNAME, RDP_LOG_PASSWORD) –≤ .env")
    sys.exit(1)

if not servers_str:
    print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (RDP_SERVERS) –≤ .env")
    sys.exit(1)

if domain:
    user = f"{domain}\\{username}"
else:
    user = username

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–∑ .env)
servers = [server.strip() for server in servers_str.split(',')]

# PowerShell-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π RDP
ps_command = '''
Get-WinEvent -LogName "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational" |
  Where-Object { $_.Id -in 21,23 } |
  Select-Object TimeCreated, Id, @{Name="User";Expression={($_.Properties[1].Value)}}, @{Name="UserName";Expression={($_.Properties[0].Value)}} |
  Sort-Object TimeCreated | 
  ConvertTo-Json -Compress -Depth 4
'''

print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö RDP-—Å–æ–±—ã—Ç–∏–π...")
print("=" * 60)

for server in servers:
    print(f"\n–°–µ—Ä–≤–µ—Ä: {server}")
    print("-" * 40)
    
    try:
        session = winrm.Session(server, auth=(user, password), transport='ntlm')
        result = session.run_ps(ps_command)
        
        if result.status_code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server}:", result.std_err.decode(errors='ignore'))
            continue
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try:
            data = json.loads(result.std_out.decode(errors='ignore'))
            if isinstance(data, list) and data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã
                dates = []
                for event in data:
                    dt = parse_ps_datetime(event.get("TimeCreated", ""))
                    if dt:
                        dates.append(dt)
                
                if dates:
                    min_date = min(dates)
                    max_date = max(dates)
                    total_days = (max_date - min_date).days
                    
                    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(data)}")
                    print(f"üìÖ –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {min_date.strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {max_date.strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"üìà –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                    thirty_days_ago = datetime.now() - timedelta(days=30)
                    recent_events = [d for d in dates if d >= thirty_days_ago]
                    print(f"üìä –°–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {len(recent_events)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
                    ninety_days_ago = datetime.now() - timedelta(days=90)
                    older_events = [d for d in dates if d >= ninety_days_ago]
                    print(f"üìä –°–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π: {len(older_events)}")
                    
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

print("\n" + "=" * 60)
print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
print("‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–æ 30 –¥–Ω–µ–π - –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç")
print("‚Ä¢ –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ 30-90 –¥–Ω–µ–π - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∂—É—Ä–Ω–∞–ª–∞")
print("‚Ä¢ –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ –±–æ–ª–µ–µ 90 –¥–Ω–µ–π - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏")
print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞") 